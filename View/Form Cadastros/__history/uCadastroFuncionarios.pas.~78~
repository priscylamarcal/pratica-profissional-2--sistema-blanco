unit uCadastroFuncionarios;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uCadastroPai, Vcl.Buttons, Vcl.StdCtrls,
  campoEdit, Vcl.ExtCtrls, Vcl.ComCtrls, Vcl.Mask, MaskEdit1, Data.DB,
  Vcl.Grids, Vcl.DBGrids, Vcl.Imaging.pngimage, uFuncionarios, uCtrlFuncionarios,
  uConsulta_Cidades, uConsulta_TiposContatos, uConsulta_Cargos,
  Datasnap.DBClient, uContatos, uTiposContatos;

type
  Tform_cadastro_funcionario = class(Tform_cadastro_pai)
    lbl_titulo_dados_gerais: TLabel;
    edt_nome: PriTEdit;
    lbl_funcionario: TLabel;
    lbl_sexo: TLabel;
    lbl_titulo_endereco: TLabel;
    edt_endereco: PriTEdit;
    edt_numero: PriTEdit;
    edt_bairro: PriTEdit;
    edt_uf: PriTEdit;
    edt_cep: PriTMaskEdit;
    edt_pesquisar_cidade: PriTEdit;
    pnl_adicionar_cidade: TPanel;
    btn_adicionar_cidade: TSpeedButton;
    lbl_endereco: TLabel;
    lbl_numero: TLabel;
    lbl_bairro: TLabel;
    lbl_cep: TLabel;
    lbl_codigo_cidade: TLabel;
    lbl_cidade: TLabel;
    lbl_uf: TLabel;
    lbl_contatos: TLabel;
    edt_nome_tipo_selecionado: PriTEdit;
    edt_algo: PriTEdit;
    edt_tipo_contato: PriTEdit;
    pnl_pesquisa_tipo_contato: TPanel;
    btn_pesquisa_tipo_contato: TSpeedButton;
    lbl_tipo_contato: TLabel;
    lbl_nome_tipo: TLabel;
    lbl_algo_contato: TLabel;
    lbl_obs: TLabel;
    memo_obs: TMemo;
    rb_mas: TRadioButton;
    rb_fem: TRadioButton;
    edt_cod_cidade: PriTEdit;
    lbl_cod_contato: TLabel;
    edt_cod_contato: PriTEdit;
    lbl_titulo_trabalho: TLabel;
    lbl_cod_cargo: TLabel;
    edt_cod_cargo: PriTEdit;
    lbl_salario: TLabel;
    edt_salario: PriTEdit;
    edt_comissao: PriTEdit;
    lbl_cargo: TLabel;
    edt_cargo: PriTEdit;
    lbl_data_admissao: TLabel;
    lbl_data_demissao: TLabel;
    lbl_comissao: TLabel;
    pnl_btn_pesquisa: TPanel;
    btn_pesquisa: TSpeedButton;
    lbl_cpf: TLabel;
    edt_mask_cpf: PriTMaskEdit;
    edt_rg: PriTEdit;
    lbl_rg: TLabel;
    lbl_data_nascimento: TLabel;
    edt_complemento: PriTEdit;
    lbl_complemento: TLabel;
    pnl_adicionar_contato: TPanel;
    btn_adicionar_contato: TSpeedButton;
    pnl_botao_alterar_item: TPanel;
    btn_botao_alterar_item: TSpeedButton;
    pnl_remover_item: TPanel;
    btn_remover_item: TSpeedButton;
    pbl_limpar_grid: TPanel;
    btn_limpar_grid: TSpeedButton;
    date_data_admissao: TDateTimePicker;
    date_data_demissao: TDateTimePicker;
    date_data_nasc: TDateTimePicker;
    dsContatos: TDataSource;
    cdsContatos: TClientDataSet;
    cdsContatoscod_tipo_contato: TIntegerField;
    cdsContatosobservacao: TStringField;
    cdsContatosdescricao: TStringField;
    GridContatos: TDBGrid;
    cdsContatosTipoContato: TStringField;
    cdsContatosnumContato: TIntegerField;
    procedure btn_adicionar_contatoMouseEnter(Sender: TObject);
    procedure btn_adicionar_contatoMouseLeave(Sender: TObject);

    procedure FormShow(Sender: TObject);
    procedure btn_adicionar_contatoClick(Sender: TObject);
    procedure btn_botao_alterar_itemClick(Sender: TObject);
    procedure btn_remover_itemClick(Sender: TObject);
    procedure btn_adicionar_cidadeClick(Sender: TObject);
    procedure btn_pesquisa_tipo_contatoClick(Sender: TObject);
    procedure btn_pesquisaClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure btn_botao_salvarClick(Sender: TObject);
//    procedure btn_limpar_gridClick(Sender: TObject);

  private
    { Private declarations }
    Alterar: boolean;
    oFuncionario : Funcionarios;
    aCtrlFuncionarios : ctrlFuncionarios;
    TipoContato: TiposContatos;

    aConsultaCidades : Tform_consulta_cidades;
    aConsultaContatos : Tform_consulta_tipos_contatos;
    aConsultaCargos : Tform_consulta_cargos;
    FuncionarioCpf: string;
    function validaItens: Boolean;
  public
    { Public declarations }

    procedure conhecaObj ( pCtrl, pObj : TObject );  override;
    procedure salvar;         override;
    procedure sair;           override;
    procedure limpaEdt;       override;
    procedure carregaEdt;     override;
    procedure bloqueiaEdt;    override;
    procedure desbloqueiaEdt; override;
    function validaFormulario : Boolean; override;
    procedure bloqueaiaBtnPesquisa;
    procedure desbloqueiaBtnPesquisa;

    procedure setFrmConsultaCidades ( pConsulta : TObject );
    procedure setFrmConsultaContatos ( pConsulta : TObject );
    procedure setFrmConsultaCargos ( pConsulta : TObject );

    procedure adicionarItens(pEdit: boolean);
    procedure limparItens;
    procedure AlterarItem;
    procedure ExcluirItem;
    procedure bloquearItens(pBloq: boolean);
  end;

var
  form_cadastro_funcionario: Tform_cadastro_funcionario;

implementation

{$R *.dfm}


procedure Tform_cadastro_funcionario.adicionarItens(pEdit: boolean);
  function validaItens: Boolean;
  begin
    result := false;

    if (Self.edt_tipo_contato.Text = '') or (Self.edt_cod_contato.text = '') then
    begin
      MessageDlg( 'Selecione o tipo contato!', MtInformation, [ MbOK ], 0 );
      self.edt_tipo_contato.setFocus;
      Exit;
    end;

    if (Self.edt_nome_tipo_selecionado.Text = '') then
    begin
      MessageDlg( 'Selecione o tamanho da variação!', MtInformation, [ MbOK ], 0 );
      self.edt_nome_tipo_selecionado.setFocus;
      Exit;
    end;

//    if (Self.edt_algo.Text = '') then
//    begin
//      MessageDlg( 'O campo código é obrigatório!', MtInformation, [ MbOK ], 0 );
//      Self.edt_algo.setFocus;
//      Exit;
//    end;

    result := true;
  end;
begin
   if validaItens then
   begin
      if pEdit then
      begin
        cdsContatos.Edit;
        cdsContatosNUMCONTATO.AsInteger := cdsContatos.RecNo;
      end
      else
      begin
        cdsContatos.Append;
        cdsContatosNUMCONTATO.AsInteger := cdsContatos.RecordCount + 1;
      end;

      cdsContatoscod_tipo_contato.AsInteger := StrToInt(edt_cod_contato.text);
      cdsContatosTipoContato.AsString := edt_tipo_contato.text;
      cdsContatosdescricao.asString := edt_nome_tipo_selecionado.text;
      cdsContatosobservacao.asString := edt_algo.text;
      cdsContatos.Post;
      limparItens;
   end
end;

procedure Tform_cadastro_funcionario.AlterarItem;
begin
  if cdsContatos.RecordCount > 0 then
   begin
      if Alterar then
      begin
        edt_cod_contato.text := IntToStr(cdsContatoscod_tipo_contato.AsInteger);
        edt_tipo_contato.text := cdsContatosTipoContato.AsString;
        edt_nome_tipo_selecionado.text := cdsContatosdescricao.asString;
        edt_algo.text := cdsContatosobservacao.asString;
        alterar := false;
      end
      else
      begin
        adicionarItens(true);
        alterar := true;
      end;
      bloquearItens(alterar);
   end
   else
     MessageDlg( 'Lista de variações está vazia!', MtInformation, [ MbOK ], 0 );
end;

procedure Tform_cadastro_funcionario.bloqueaiaBtnPesquisa;
begin
  self.btn_adicionar_cidade.Visible:= False;
  self.btn_pesquisa_tipo_contato.Visible:= False;
  self.btn_pesquisa.Visible:= False;

  self.btn_adicionar_contato.Enabled:= False;
  self.btn_botao_alterar_item.Enabled:= False;
  self.btn_remover_item.Enabled:= False;
  self.btn_limpar_grid.Enabled:= False;
end;

procedure Tform_cadastro_funcionario.bloquearItens(pBloq: boolean);
begin
  btn_adicionar_contato.Enabled := pBloq;
  btn_remover_item.Enabled := pBloq;
  GridContatos.Enabled := pBloq;
end;

procedure Tform_cadastro_funcionario.bloqueiaEdt;
begin
  inherited;
  self.edt_nome.Enabled:= False;
  self.rb_mas.Enabled:= False;
  self.rb_fem.Enabled:= False;
  self.edt_endereco.Enabled:= False;
  self.edt_complemento.Enabled:= False;
  self.edt_numero.Enabled:= False;
  self.edt_bairro.Enabled:= False;
  self.edt_cep.Enabled:= False;
  self.edt_cod_cidade.Enabled:= False;
  self.edt_pesquisar_cidade.Enabled:= False;
  self.edt_uf.Enabled:= False;
  self.edt_cod_contato.Enabled:= False;
  self.edt_tipo_contato.Enabled:= False;
  self.edt_nome_tipo_selecionado.Enabled:= False;
  self.edt_algo.Enabled:= False;
  self.edt_mask_cpf.Enabled:= False;
  self.edt_rg.Enabled:= False;
  self.date_data_nasc.Enabled:= False;
  self.edt_cod_cargo.Enabled:= False;
  self.edt_cargo.Enabled:= False;
  self.date_data_admissao.Enabled:= False;
  self.date_data_demissao.Enabled:= False;
  self.edt_salario.Enabled:= False;
  self.edt_comissao.Enabled:= False;
  self.memo_obs.Enabled:= False;
end;



procedure Tform_cadastro_funcionario.carregaEdt;
var contatoAux: Contato;
begin
  //inherited;

  if oFuncionario.getCodigo <> 0 then
     self.edt_codigo.Text:= IntToStr( oFuncionario.getCodigo );

  self.edt_nome.Text:= oFuncionario.getNomeRazaoSocial;
  self.edt_endereco.Text:= oFuncionario.getEndereco;
  self.edt_complemento.Text:= oFuncionario.getComplemento;
  self.edt_numero.Text:= oFuncionario.getNumero;
  self.edt_bairro.Text:= oFuncionario.getBairro;
  self.edt_cep.Text:= oFuncionario.getCep;
  self.edt_cod_cidade.Text:= IntToStr ( oFuncionario.getaCidade.getCodigo );
  self.edt_pesquisar_cidade.Text:= oFuncionario.getaCidade.getCidade;
  self.edt_uf.Text:= oFuncionario.getaCidade.getoEstado.getUF;
  //self.edt_cod_contato.Text:= IntToStr ( oFuncionario.getoContato.getCodigo );
//  self.edt_tipo_contato.Text:= oFuncionario.getoContato.getTipoContato;
//  self.edt_nome_tipo_selecionado.Text:= oFuncionario.getContatoAux1;
//  self.edt_algo.Text:= oFuncionario.getContatoAux2;
  self.edt_mask_cpf.Text:= oFuncionario.getCnpjCpf;
  self.edt_rg.Text:= oFuncionario.getIeRg;
  self.date_data_nasc.Date:= oFuncionario.getDataNasc;
  self.edt_cod_cargo.Text:= IntToStr ( oFuncionario.getoCargo.getCodigo );
  self.edt_cargo.Text:= oFuncionario.getoCargo.getCargo;
  self.date_data_admissao.Date:= oFuncionario.getDataAdmissao;
  self.date_data_demissao.Date:= oFuncionario.getDataDemis;
  self.edt_salario.Text:= FloatToStr ( oFuncionario.getSalario );
  self.edt_comissao.Text:= FloatToStr ( oFuncionario.getComissao );
  self.memo_obs.Text:= oFuncionario.getObs;

  self.edt_data_cadastro.Text:= DateToStr( oFuncionario.getDataCad);
  self.edt_data_ult_alt.Text:= DateToStr(oFuncionario.getUltAlt);
  FuncionarioCpf := oFuncionario.getCnpjCpf;

  for contatoAux in oFuncionario.getListaContatos do
  begin
    cdsContatos.Append;
    cdsContatos.FieldByName('cod_tipo_contato').AsInteger := contatoAux.getaTipoContato.getCodigo;
    cdsContatos.FieldByName('observaocao').AsString       := contatoAux.getobservacao;
    cdsContatos.FieldByName('descricao').AsString         := contatoAux.getadescricao;
    cdsContatos.FieldByName('tipoContato').Asstring       := contatoAux.getaTipoContato.getTipoContato;
    cdsContatos.FieldByName('numContato').AsInteger       := contatoAux.getnumeroContato;
    cdsContatos.Post;
  end;
  cdsContatos.First;
  cdsContatos.EnableControls;
end;

procedure Tform_cadastro_funcionario.conhecaObj(pCtrl, pObj: TObject);
begin
  inherited;
  oFuncionario:= Funcionarios( pObj );
  aCtrlFuncionarios:= ctrlFuncionarios( pCtrl );

  self.limpaEdt;
  self.limparItens;
  self.carregaEdt;
end;

procedure Tform_cadastro_funcionario.desbloqueiaBtnPesquisa;
begin
  self.btn_adicionar_cidade.Visible:= True;
  self.btn_pesquisa_tipo_contato.Visible:= True;
  self.btn_pesquisa.Visible:= True;

  self.btn_adicionar_contato.Enabled:= True;
  self.btn_botao_alterar_item.Enabled:= True;
  self.btn_remover_item.Enabled:= True;
  self.btn_limpar_grid.Enabled:= True;
end;

procedure Tform_cadastro_funcionario.desbloqueiaEdt;
begin
  inherited;
  self.edt_nome.Enabled:= True;
  self.rb_mas.Enabled:= True;
  self.rb_fem.Enabled:= True;
  self.edt_endereco.Enabled:= True;
  self.edt_complemento.Enabled:= True;
  self.edt_numero.Enabled:= True;
  self.edt_bairro.Enabled:= True;
  self.edt_cep.Enabled:= True;
  self.edt_cod_cidade.Enabled:= True;
  self.edt_pesquisar_cidade.Enabled:= True;
  self.edt_uf.Enabled:= True;
  self.edt_cod_contato.Enabled:= True;
  self.edt_tipo_contato.Enabled:= True;
  self.edt_nome_tipo_selecionado.Enabled:= True;
  self.edt_algo.Enabled:= True;
  self.edt_mask_cpf.Enabled:= True;
  self.edt_rg.Enabled:= True;
  self.date_data_nasc.Enabled:= True;
  self.edt_cod_cargo.Enabled:= True;
  self.edt_cargo.Enabled:= True;
  self.date_data_admissao.Enabled:= True;
  self.date_data_demissao.Enabled:= True;
  self.edt_salario.Enabled:= True;
  self.edt_comissao.Enabled:= True;
  self.memo_obs.Enabled:= True;
end;

procedure Tform_cadastro_funcionario.ExcluirItem;
var i: integer;
begin
  if cdsContatos.RecordCount > 0 then
  begin
    cdsContatos.Delete;
    cdsContatos.First;
    for I := 0 to cdsContatos.RecordCount - 1 do
    begin
      cdsContatos.edit;
      cdsContatosNUMCONTATO.AsInteger := I+1;
      cdsContatos.post;
    end;
  end
  else
    MessageDlg( 'Lista de Contatos está vazia!', MtInformation, [ MbOK ], 0 );
end;

procedure Tform_cadastro_funcionario.FormCreate(Sender: TObject);
begin
  inherited;
  if cdsContatos.Active then
    cdsContatos.Close;
  cdsContatos.Open;
  cdsContatos.EmptyDataSet;

  TipoContato := TiposContatos.crieObj;
end;

procedure Tform_cadastro_funcionario.FormDestroy(Sender: TObject);
begin
  inherited;
  TipoContato.destrua_se;
end;

procedure Tform_cadastro_funcionario.FormShow(Sender: TObject);
begin
  inherited;

  if Self.btn_botao_salvar.Caption='Salvar' then
        edt_nome.SetFocus;

end;

procedure Tform_cadastro_funcionario.limpaEdt;
begin
  inherited;
  self.edt_nome.clear;
  self.edt_endereco.clear;
  self.edt_complemento.clear;
  self.edt_numero.clear;
  self.edt_bairro.clear;
  self.edt_cep.clear;
  self.edt_cod_cidade.clear;
  self.edt_pesquisar_cidade.clear;
  self.edt_uf.clear;
  self.edt_cod_contato.clear;
  self.edt_tipo_contato.clear;
  self.edt_nome_tipo_selecionado.clear;
  self.edt_algo.clear;
  self.edt_mask_cpf.clear;
  self.edt_rg.clear;
  self.edt_cod_cargo.clear;
  self.edt_cargo.clear;
  self.edt_salario.clear;
  self.edt_comissao.clear;
  self.memo_obs.clear;
  Self.edt_data_cadastro.Clear;
  self.edt_data_ult_alt.Clear;
  Alterar := true;
end;

procedure Tform_cadastro_funcionario.limparItens;
begin
  self.edt_cod_contato.Clear;
  self.edt_tipo_contato.Clear;
  self.edt_nome_tipo_selecionado.Clear;
  self.edt_algo.Clear;
end;

//procedure Tform_cadastro_funcionario.ListView1SelectItem(Sender: TObject;
//  Item: TListItem; Selected: Boolean);
//begin
//  inherited;
//  if Selected then
//  begin
//    btn_remover_item.Enabled:= True;
//    btn_botao_alterar_item.Enabled:= True;
//  end
//  else
//  begin
//    btn_remover_item.Enabled:= False;
//    btn_botao_alterar_item.Enabled:= False;
//  end;
//end;

procedure Tform_cadastro_funcionario.sair;
begin
  inherited;

end;

procedure Tform_cadastro_funcionario.salvar;
var auxContato: Contato;
begin
  inherited;
  if validaFormulario then
  begin
    oFuncionario.setCodigo( StrToInt ( self.edt_codigo.Text ) );
    oFuncionario.setNomeRazaoSocial( self.edt_nome.Text );
    oFuncionario.setEndereco( self.edt_endereco.Text );
    oFuncionario.setNumero( self.edt_numero.Text );
    oFuncionario.setComplemento( self.edt_complemento.Text );
    oFuncionario.setBairro( self.edt_bairro.Text );
    oFuncionario.setCep( self.edt_cep.Text );
    oFuncionario.getaCidade.setCodigo( StrToInt ( self.edt_cod_cidade.Text ) );
    oFuncionario.getaCidade.setCidade( self.edt_pesquisar_cidade.Text );
    oFuncionario.getaCidade.getoEstado.setUF( self.edt_uf.Text );
//    oFuncionario.getoContato.setCodigo( StrToInt ( self.edt_cod_contato.Text ) );
//    oFuncionario.getoContato.setTipoContato( self.edt_tipo_contato.Text );
//    oFuncionario.setContatoAux1( self.edt_nome_tipo_selecionado.Text );
//    oFuncionario.setContatoAux2( self.edt_algo.Text );
    oFuncionario.setCnpjCpf( self.edt_mask_cpf.Text );
    oFuncionario.setIeRg( self.edt_rg.Text );
    oFuncionario.getoCargo.setCodigo( StrToInt ( self.edt_cod_cargo.Text ) );
    oFuncionario.getoCargo.setCargo( self.edt_cargo.Text );
//    oFuncionario.setDataCad( Date );
    //oFuncionario.setUltAlt( Date );
    oFuncionario.setCodUsu( StrToInt ( Self.edt_cod_usuario.Text ) );
    oFuncionario.setDataNasc( Self.date_data_nasc.Date );
    oFuncionario.setDataAdmissao( Self.date_data_admissao.Date );
    oFuncionario.setDataDemis( Self.date_data_demissao.Date );
    oFuncionario.setSalario( StrToFloat (self.edt_salario.Text ));
    oFuncionario.setComissao( StrToFloat (self.edt_comissao.Text ));
    oFuncionario.setObs( self.memo_obs.Text );

    cdsContatos.DisableControls;
      oFuncionario.getListaContatos.Clear;
      try
        cdsContatos.First;
        while not(cdsContatos.Eof) do
          begin
            AuxContato := Contato.crieObj;
            with AuxContato, cdsContatos do
              begin
                getaTipoContato.setCodigo(FieldByName('cod_tipo_contato').AsInteger);
                getaTipoContato.setTipoContato(FieldByName('TipoContato').AsString);
                setDescricao(FieldByName('Descricao').AsString);
                SetObservacao( FieldByName('Observacao').Asstring);
                SetNumeroContato( FieldByName('numContato').AsInteger);
              end;
            oFuncionario.getListaContatos.Add(AuxContato);
            cdsContatos.Next;
          end;
      finally
        cdsContatos.EnableControls;
      end;

//    if Self.btn_botao_salvar.Caption = 'Salvar' then // INCLUIR-ALTERAR
//       aCtrlFuncionarios.salvar( oFuncionario.clone )
//    else //EXCLUIR
//       aCtrlFuncionarios.excluir( oFuncionario.clone );
    if self.btn_botao_salvar.Caption = 'Salvar' then
    begin
          if (oFuncionario.getCodigo = 0) then
          begin
              if (aCtrlFuncionarios.VerificaExiste(oFuncionario)) then  //verifica se existe pais quando é incluir
                begin
                  ShowMessage('Já existe um Funcionário cadastrado com esse CPF!');
                  edt_mask_cpf.SetFocus;
                  Exit;
                end;
          end
          else
          begin
              if not(FuncionarioCpf = oFuncionario.getCnpjCpf) then   //verifica se mudou o nome na alteracao
                if aCtrlFuncionarios.VerificaExiste(oFuncionario) then //se mudou verifica se já existe pais com o nome
                begin
                    aCtrlFuncionarios.SetPosicao(oFuncionario.getcodigo);
                    ShowMessage('Já existe um Funcionário Cadastrado com esse CPF!');
                    edt_mask_cpf.SetFocus;
                    Exit;
                end;
          end;
       aCtrlFuncionarios.SetPosicao(oFuncionario.getcodigo);
       aCtrlFuncionarios.salvar( oFuncionario.clone );
    end
    else
      if aCtrlFuncionarios.ValidaExclusao(oFuncionario.clone) then
        aCtrlFuncionarios.excluir( oFuncionario.clone )
      else
        ShowMessage('O Funcionário está sendo usado por outro registro, não pode ser excluído!');


    self.sair;
  end;
end;

procedure Tform_cadastro_funcionario.setFrmConsultaCargos(pConsulta: TObject);
begin
  aConsultaCargos:= Tform_consulta_cargos( pConsulta );
end;

procedure Tform_cadastro_funcionario.setFrmConsultaCidades(pConsulta: TObject);
begin
  aConsultacidades:= Tform_consulta_cidades( pConsulta );
end;

procedure Tform_cadastro_funcionario.setFrmConsultaContatos(pConsulta: TObject);
begin
  aConsultaContatos:= Tform_consulta_tipos_contatos( pConsulta );
end;

function Tform_cadastro_funcionario.validaFormulario: Boolean;
var cpf: string;
begin
  Result:= False;

  if Self.edt_nome.Text = '' then
  begin
    MessageDlg( 'O campo Funcionário é obrigatório!', MtInformation, [ MbOK ], 0 );
    edt_nome.SetFocus;
    Exit;
  end;

  if Self.edt_endereco.Text = '' then
  begin
    MessageDlg( 'O campo Endereço é obrigatório!', MtInformation, [ MbOK ], 0 );
    edt_endereco.SetFocus;
    Exit;
  end;

  if Self.edt_numero.Text = '' then
  begin
    MessageDlg( 'O campo Número é obrigatório!', MtInformation, [ MbOK ], 0 );
    edt_numero.SetFocus;
    Exit;
  end;

  if Self.edt_bairro.Text = '' then
  begin
    MessageDlg( 'O campo Bairro é obrigatório!', MtInformation, [ MbOK ], 0 );
    edt_bairro.SetFocus;
    Exit;
  end;

  if Self.edt_pesquisar_cidade.Text = '' then
  begin
    MessageDlg( 'O campo Cidade é obrigatório!', MtInformation, [ MbOK ], 0 );
    edt_pesquisar_cidade.SetFocus;
    Exit;
  end;

  cpf := StringReplace(edt_mask_cpf.Text, ' ', '', [rfReplaceAll]);
  if Length(cpf) < 14 then
  begin
    MessageDlg( 'Complete corretamente o campo CNPJ!', MtInformation, [ MbOK ], 0 );
    edt_mask_cpf.SetFocus;
    Exit;
  end;

  if Self.edt_rg.Text = '' then
  begin
    MessageDlg( 'O campo RG é obrigatório!', MtInformation, [ MbOK ], 0 );
    edt_rg.SetFocus;
    Exit;
  end;

//  if Self.date_data_nasc.Date = StrToDate (FormatDateTime('dd/mm/yyyy', Date) ) then
//  begin
//    MessageDlg( 'O campo RG/IE é obrigatório!', MtInformation, [ MbOK ], 0 );
//    date_data_nasc.SetFocus;
//    Exit;
//  end;

  if Self.edt_cargo.Text = '' then
  begin
    MessageDlg( 'O campo Cargo é obrigatório!', MtInformation, [ MbOK ], 0 );
    edt_cargo.SetFocus;
    Exit;
  end;

  if Self.edt_salario.Text = '' then
  begin
    MessageDlg( 'O campo Salário é obrigatório!', MtInformation, [ MbOK ], 0 );
    edt_salario.SetFocus;
    Exit;
  end;

  if Self.edt_comissao.Text = '' then
  begin
    MessageDlg( 'O campo Comissão é obrigatório!', MtInformation, [ MbOK ], 0 );
    edt_comissao.SetFocus;
    Exit;
  end;

  if Self.date_data_nasc.Date >= Date then
  begin
    MessageDlg( 'A data de nascimento não pode ser igual a data atual', MtInformation, [ MbOK ], 0 );
    date_data_nasc.SetFocus;
    Exit;
  end;

  if (Self.date_data_admissao.Date >= Self.date_data_demissao.Date) then
  begin
    MessageDlg( 'A data de adimissão não pode ser maior que a data de demissão', MtInformation, [ MbOK ], 0 );
    date_data_nasc.SetFocus;
    Exit;
  end;

 Result:= true;
end;

function Tform_cadastro_funcionario.validaItens: Boolean;
begin
  Result:= False;

  if Self.edt_tipo_contato.Text = '' then
  begin
    MessageDlg( 'O campo Tipo de Contato é obrigatório!', MtInformation, [ MbOK ], 0 );
    edt_tipo_contato.SetFocus;
    Exit;
  end;

  if Self.edt_nome_tipo_selecionado.Text = '' then
  begin
    MessageDlg( 'O campo é obrigatório!', MtInformation, [ MbOK ], 0 );
    edt_nome_tipo_selecionado.SetFocus;
    Exit;
  end;

 Result:= true;
end;

procedure Tform_cadastro_funcionario.btn_adicionar_cidadeClick(Sender: TObject);
var aux : string;
begin
  //inherited;
  aConsultacidades.conhecaObj( aCtrlFuncionarios.getCtrlCidades, oFuncionario.getaCidade );
  aux:= aConsultacidades.btn_botao_sair.Caption;
  aConsultacidades.btn_botao_sair.Caption:= 'Selecionar';
  aConsultacidades.ShowModal;
  aConsultacidades.btn_botao_sair.Caption:= aux;

  self.edt_cod_cidade.Text:= IntToStr( oFuncionario.getaCidade.getCodigo );
  self.edt_pesquisar_cidade.Text:= oFuncionario.getaCidade.getCidade;
  self.edt_uf.Text:= oFuncionario.getaCidade.getoEstado.getUF;
end;

procedure Tform_cadastro_funcionario.btn_adicionar_contatoClick(
  Sender: TObject);
begin
  inherited;
  adicionarItens(false);
  limparItens;
end;

procedure Tform_cadastro_funcionario.btn_botao_alterar_itemClick(
  Sender: TObject);
begin
  AlterarItem;
end;


procedure Tform_cadastro_funcionario.btn_botao_salvarClick(Sender: TObject);
begin
  inherited;

end;

//procedure Tform_cadastro_funcionario.btn_limpar_gridClick(Sender: TObject);
//begin
//  inherited;
//  ListView1.Clear;
//end;

procedure Tform_cadastro_funcionario.btn_pesquisaClick(Sender: TObject);
var aux : string;
begin
  //inherited;
  aConsultaCargos.conhecaObj( aCtrlFuncionarios.getCtrlCargos, oFuncionario.getoCargo );
  aux:= aConsultaCargos.btn_botao_sair.Caption;
  aConsultaCargos.btn_botao_sair.Caption:= 'Selecionar';
  aConsultaCargos.ShowModal;
  aConsultaCargos.btn_botao_sair.Caption:= aux;

  self.edt_cod_cargo.Text:= IntToStr( oFuncionario.getoCargo.getCodigo );
  self.edt_cargo.Text:= oFuncionario.getoCargo.getCargo;
end;

procedure Tform_cadastro_funcionario.btn_pesquisa_tipo_contatoClick(
  Sender: TObject);
  var aux : string;

begin
//  inherited;
  aConsultaContatos.conhecaObj( aCtrlFuncionarios.getCtrlTiposContatos, TipoContato );
  aux:= aConsultaContatos.btn_botao_sair.Caption;
  aConsultaContatos.btn_botao_sair.Caption:= 'Selecionar';
  aConsultaContatos.ShowModal;
  aConsultaContatos.btn_botao_sair.Caption:= aux;

  self.edt_cod_contato.Text:= IntToStr( TipoContato.getCodigo );
  self.edt_tipo_contato.Text:= TipoContato.getTipoContato;

  lbl_nome_tipo.Caption:= edt_tipo_contato.Text;
end;

procedure Tform_cadastro_funcionario.btn_remover_itemClick(Sender: TObject);
begin
  ExcluirItem;
end;

//---------------------ESTILOS BOTÕES---------------------//

procedure Tform_cadastro_funcionario.btn_adicionar_contatoMouseEnter(
  Sender: TObject);
begin
  btn_adicionar_contato.Font.Style:= [fsBold];
end;

procedure Tform_cadastro_funcionario.btn_adicionar_contatoMouseLeave(
  Sender: TObject);
begin
  btn_adicionar_contato.Font.Style:= [];
end;

end.
