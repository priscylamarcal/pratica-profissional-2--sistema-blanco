unit UCtrlCompras;

interface

uses uCompras, uFilterSearch, uController, uRoupas, uCtrlRoupas,
  uCtrlFornecedores, uFornecedores, uCondicoesPagamentos, uCtrlCondicoesPagamentos, uDaoCompras,
   uCtrlVariacoesRoupas, uVariacoesRoupas;

  type
    ctrlCompras = class(Ctrl)
  private
  protected
    //CtrlRoupasItens
    aDaoCompras: DaoCompras;
    aCtrlFornecedores: ctrlFornecedores;
    aCtrlCondicoesPagamento: ctrlCondicoesPagamentos;
    aCtrlVariacoesRoupas: CtrlVariacoesRoupas;
    //CtrlParcelasCondicoes
  public
    constructor crieObj; override;
    destructor destrua_se; override;
    procedure setDM(pDM: TObject); override;
    function getDS: TObject; override;
    function pesquisar(AFilter: TFilterSearch; pChave: string): string;
      override;
    function salvar(pObj: TObject): string; override;
    function excluir(pObj: TObject): string; override;
    function carregar(pObj: TObject): string; override;
    procedure setCtrlFornecedores(pCtrl: ctrlFornecedores);
    procedure setCtrlCondicoesPagamentos(pCtrl: CtrlCondicoesPagamentos);
    function getCtrlFornecedores: ctrlFornecedores;
    function getCtrlCondicoesPagamentos : CtrlCondicoesPagamentos;
    function getCtrlVariacoesRoupas : CtrlVariacoesRoupas;
    procedure setCtrlVariacoesRoupas(pCtrl: CtrlVariacoesRoupas);
    function VerificaExiste(pObj: TObject): Boolean;
    function ValidaExclusao(pObj: TObject): Boolean; override;
    function recuperarRoupa(var pRoupa: Roupas) : boolean;
    end;
implementation

{ ctrlCompras }

function ctrlCompras.carregar(pObj: TObject): string;
var mFornecedor: Fornecedores;
    mCondicaoPagamento: CondicoesPagamentos;
    AFilter: TFilterSearch;
    pChave: string;
begin
   aDaoCompras.Carregar(pObj);

  aCtrlFornecedores.setPosicao(Compras(pObj).getumFornecedor.getCodigo);
  mFornecedor := Compras(pObj).getumFornecedor;
  aCtrlFornecedores.carregar(TObject(mFornecedor));

  aCtrlCondicoesPagamento.setPosicao(Compras(pObj).getumaCondicaoPagamento.getCodigo);
  mCondicaoPagamento := Compras(pObj).getumaCondicaoPagamento;
  aCtrlCondicoesPagamento.carregar(TObject(mCondicaoPagamento));

end;

constructor ctrlCompras.crieObj;
begin
  aDaoCompras := daoCompras.CrieObj;
end;

destructor ctrlCompras.destrua_se;
begin
  aDaoCompras.destrua_se;
end;

function ctrlCompras.excluir(pObj: TObject): string;
begin
  result := aDaoCompras.excluir(pObj);
end;

function ctrlCompras.getCtrlCondicoesPagamentos: CtrlCondicoesPagamentos;
begin
  result := aCtrlCondicoesPagamento;
end;

function ctrlCompras.getCtrlFornecedores: ctrlFornecedores;
begin
  result := aCtrlFornecedores;
end;

function ctrlCompras.getCtrlVariacoesRoupas: CtrlVariacoesRoupas;
begin
  result := aCtrlVariacoesRoupas;
end;

function ctrlCompras.getDS: TObject;
begin
  result := aDaoCompras.getDS;
end;

function ctrlCompras.pesquisar(AFilter: TFilterSearch; pChave: string): string;
begin
  result := aDaoCompras.pesquisar(AFilter, pChave);
end;

function ctrlCompras.recuperarRoupa(var pRoupa: Roupas): boolean;
begin
  result := aDaoCompras.RecuperarRoupa(pRoupa);
end;

function ctrlCompras.salvar(pObj: TObject): string;
begin
  aDaoCompras.salvar(pObj)
end;

procedure ctrlCompras.setCtrlCondicoesPagamentos(
  pCtrl: CtrlCondicoesPagamentos);
begin
   aCtrlCondicoesPagamento := pCtrl;
end;

procedure ctrlCompras.setCtrlFornecedores(pCtrl: ctrlFornecedores);
begin
   aCtrlFornecedores := pCtrl;
end;

procedure ctrlCompras.setCtrlVariacoesRoupas(pCtrl: CtrlVariacoesRoupas);
begin
   aCtrlVariacoesRoupas := pCtrl
end;

procedure ctrlCompras.setDM(pDM: TObject);
begin
  inherited;
  aDaoCompras.setDM(pDM);
end;

function ctrlCompras.ValidaExclusao(pObj: TObject): Boolean;
begin
  Result := aDaoCompras.ValidaExclusao(pObj);
end;

function ctrlCompras.VerificaExiste(pObj: TObject): Boolean;
begin
  Result := aDaoCompras.VerificaExiste(pObj);
end;

end.
