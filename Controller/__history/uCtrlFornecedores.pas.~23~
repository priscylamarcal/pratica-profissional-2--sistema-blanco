unit uCtrlFornecedores;

interface

uses uController, uDaoFornecedores, uFilterSearch, uCtrlTiposContatos,
  uCtrlCidades, uCtrlCondicoesPagamentos, uCidades, uTiposContatos,
  uCondicoesPagamentos, uFornecedores, uCtrlContatos;

type
  ctrlFornecedores = class(Ctrl)
  private
  protected
    aDaoFornecedores: daoFornecedores;
    aCtrlCidades: ctrlCidades;
    aCtrlTiposContatos: ctrlTiposContatos;
    aCtrlCondicoes: ctrlCondicoesPagamentos;
    aCtrlContatos: ctrlContatos;
  public
    constructor crieObj; override;
    destructor destrua_se; override;
    procedure setDM(pDM: TObject); override;
    function getDS: TObject; override;
    function pesquisar(AFilter: TFilterSearch; pChave: string): string;
      override;
    function salvar(pObj: TObject): string; override;
    function excluir(pObj: TObject): string; override;
    function carregar(pObj: TObject): string; override;
    procedure setCtrlCidades(pCtrl: ctrlCidades);
    procedure setCtrlTiposContatos(pCtrl: ctrlTiposContatos);
    procedure setCtrlCondicoes(pCtrl: ctrlCondicoesPagamentos);
    procedure setCtrlContatos ( pCtrl : ctrlContatos );
    function getCtrlCidades: ctrlCidades;
    function getCtrlTiposContatos: ctrlTiposContatos;
    function getCtrlCondicoes: ctrlCondicoesPagamentos;
    procedure setPosicao(acodigo: integer);
    function VerificaExiste(oFornecedor: Fornecedores): Boolean;
  end;

implementation

{ ctrlFornecedores }
function ctrlFornecedores.carregar(pObj: TObject): string;
var
  mCidade: Cidades;
  //mContato: TiposContatos;
  mCondicao: CondicoesPagamentos;
  AFilter: TFilterSearch;
  pChave: string;
begin
  aDaoFornecedores.carregar(pObj);
  aCtrlCidades.setPosicao(Fornecedores(pObj).getaCidade.GetCodigo);
  mCidade := Fornecedores(pObj).getaCidade;
  // aCtrlCidades.pesquisar( AFilter, pchave );
  aCtrlCidades.carregar(TObject(mCidade));
//  aCtrlTiposContatos.setPosicao(Fornecedores(pObj).getoContato.GetCodigo);
//  mContato := Fornecedores(pObj).getoContato;
  // aCtrlTiposContatos.pesquisar( AFilter, pchave );
  //aCtrlTiposContatos.carregar(TObject(mContato));
  aCtrlCondicoes.setPosicao(Fornecedores(pObj).getaCondicao.GetCodigo);
  mCondicao := Fornecedores(pObj).getaCondicao;
  // aCtrlCondicoes.pesquisar( AFilter, pchave );
  aCtrlCondicoes.carregar(TObject(mCondicao));
  Fornecedores(pObj).setListaContatos(aCtrlContatos.RetornaListaContatos
    (Fornecedores(pObj).getCodigo, 1));
end;

constructor ctrlFornecedores.crieObj;
begin
  aDaoFornecedores := daoFornecedores.crieObj;
end;

destructor ctrlFornecedores.destrua_se;
begin
  aDaoFornecedores.destrua_se;
end;

function ctrlFornecedores.excluir(pObj: TObject): string;
begin
  if aCtrlContatos.DeleteListaContatos(Fornecedores(pObj).getCodigo, 1) then
    result := aDaoFornecedores.excluir(pObj);
end;

function ctrlFornecedores.getCtrlCidades: ctrlCidades;
begin
  result := aCtrlCidades;
end;

function ctrlFornecedores.getCtrlCondicoes: ctrlCondicoesPagamentos;
begin
  result := aCtrlCondicoes;
end;

function ctrlFornecedores.getCtrlTiposContatos: ctrlTiposContatos;
begin
  result := aCtrlTiposContatos;
end;

function ctrlFornecedores.getDS: TObject;
begin
  result := aDaoFornecedores.getDS;
end;

function ctrlFornecedores.pesquisar(AFilter: TFilterSearch;
  pChave: string): string;
begin
  result := aDaoFornecedores.pesquisar(AFilter, pChave);
end;

function ctrlFornecedores.salvar(pObj: TObject): string;
begin
  if aDaoFornecedores.salvar( pObj ) = 'SUCESSO' then
  begin
    aCtrlContatos.DeleteListaContatos(Fornecedores(pObj).getCodigo, 0);
    Fornecedores(pObj).setCodigoListaContatos;
    aCtrlContatos.salvarContato(Fornecedores(pObj).getListaContatos);
  end;
end;

procedure ctrlFornecedores.setCtrlCidades(pCtrl: ctrlCidades);
begin
  aCtrlCidades := pCtrl;
end;

procedure ctrlFornecedores.setCtrlCondicoes(pCtrl: ctrlCondicoesPagamentos);
begin
  aCtrlCondicoes := pCtrl;
end;

procedure ctrlFornecedores.setCtrlTiposContatos(pCtrl: ctrlTiposContatos);
begin
  aCtrlTiposContatos := pCtrl;
end;

procedure ctrlFornecedores.setDM(pDM: TObject);
begin
  inherited;
  aDaoFornecedores.setDM(pDM);
end;

procedure ctrlFornecedores.setPosicao(acodigo: integer);
begin
  aDaoFornecedores.setPosicao(acodigo);
end;

function ctrlFornecedores.VerificaExiste(oFornecedor: Fornecedores): Boolean;
begin
  result := aDaoFornecedores.VerificaExiste(oFornecedor);
end;

end.
