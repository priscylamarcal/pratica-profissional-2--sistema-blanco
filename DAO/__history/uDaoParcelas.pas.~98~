unit uDaoParcelas;

interface

uses uDAO,
  uFilterSearch, uParcelas, uFormaPagamento,

  System.Generics.Collections, System.SysUtils;

type
  daoParcela = class(DAO)
  private

  protected
  public
    constructor crieObj; override;
    function getDS: TObject; override;
    function pesquisar(AFilter: TFilterSearch; pChave: string): string;
      override;
    function salvar(pObj: TObject): string; override;
    function excluir(pObj: TObject): string; override;
    function carregar(pObj: TObject): string; override;
    function salvarLista(lista: TObjectList<Parcela>): string;
    function carregarLista(lista: TObjectList<Parcela>): string;

    function RetornaListaParcelas(const ACodCondPgto: Integer) : TObjectList<Parcela>;
    function DeleteListaParcelasCondPgto(const ACodCondPgto: Integer): Boolean;
  end;

implementation
uses
  FireDAC.Comp.Client;
{ daoParcelas }

function daoParcela.carregar(pObj: TObject): string;
var
  mParcela: Parcela;
  mFormaPagamento: FormasPagamentos;
begin
  mParcela := Parcela(pObj);
  mFormaPagamento := mParcela.getaFormaPgto;

  mParcela.setDias(aDM.QParcelas.FieldByName('DIAS').AsInteger);
  mParcela.setParcelas(aDM.QParcelas.FieldByName('NUMERO_PARCELA').AsInteger);
  mParcela.setPorcentagem(aDM.QParcelas.FieldByName('PERCENTUAL').AsFloat);
  mParcela.setCodCondPgto(aDM.QParcelas.FieldByName('COD_COND_PGTO').AsInteger);

  mParcela.getaFormaPgto.setCodigo
    (aDM.QParcelas.FieldByName('COD_FORMA_PGTO').Value);
end;

function daoParcela.RetornaListaParcelas(const ACodCondPgto: Integer)
  : TObjectList<Parcela>;
var
  AParcela: Parcela;
  AQuery  : TFDQuery;
begin
  Result := nil;
  AQuery := TFDQuery.Create(nil);
  AQuery.Connection  := adm.Conexao;
  AQuery.Transaction := aDM.Transacao;


  try
    if (AQuery.Active) then
     AQuery.Close;
    AQuery.SQL.Clear;

    AQuery.SQL.Add('SELECT * FROM PARCELAS');
    AQuery.SQL.Add('WHERE COD_COND_PGTO = :COD_COND_PGTO');
    AQuery.ParamByName('COD_COND_PGTO').AsInteger := ACodCondPgto;
    AQuery.Open;

    AQuery.First;

    Result := TObjectList<Parcela>.Create;
    while not(AQuery.Eof) do
    begin
      AParcela := Parcela.crieObj;

      with AParcela, AQuery do
      begin
        setDias(FieldByName('DIAS').AsInteger);
        setParcelas(FieldByName('NUMERO_PARCELA').AsInteger);
        setPorcentagem(FieldByName('PERCENTUAL').AsFloat);
        setCodCondPgto(FieldByName('COD_COND_PGTO').AsInteger);
        getaFormaPgto.setCodigo(FieldByName('COD_FORMA_PGTO').Value);
        if aDM.QFormasPagamentos.Locate('CODFORMA', getaFormaPgto.getCodigo, [])
        then
          getaFormaPgto.setFormaPagamento
            (aDM.QFormasPagamentos.FieldByName('FORMA').AsString);
      end;

      Result.Add(AParcela);
      AQuery.Next;
    end;

    AQuery.Close;
  finally
    FreeAndNil(AQuery);
  end;
end;

function daoParcela.carregarLista(lista: TObjectList<Parcela>): string;
begin

end;

constructor daoParcela.crieObj;
begin
  inherited;
end;

function daoParcela.DeleteListaParcelasCondPgto(const ACodCondPgto: Integer): Boolean;
begin
  if (aDM.QParcelas.Active) then
    aDM.QParcelas.Close;

  if not aDM.Conexao.InTransaction then
    aDM.Transacao.StartTransaction;
  try
    aDM.QParcelas.SQL.Clear;
    aDM.QParcelas.SQL.Add('DELETE FROM PARCELAS WHERE COD_COND_PGTO = :COD_COND_PGTO');
    aDM.QParcelas.ParamByName('COD_COND_PGTO').AsInteger := ACodCondPgto;
    aDM.QParcelas.ExecSQL;

    Result := (aDM.QParcelas.RowsAffected > 0);

    aDM.Transacao.Commit;
  except
    on e: Exception do
    begin
      raise Exception.Create('Erro:' + e.Message);
      Result := False;
      aDM.Transacao.Rollback;
    end;
  end;
end;

function daoParcela.excluir(pObj: TObject): string;
begin
  aDM.Conexao.StartTransaction;

  aDM.QParcelas.SQL.Clear;
  aDM.QParcelas.SQL.Add
    ('DELETE FROM PARCELAS WHERE COD_COND_PGTO = :COD_COND_PGTO');
  aDM.QParcelas.ParamByName('COD_COND_PGTO').AsInteger := Parcela(pObj)
    .getCodCondPgto;
  aDM.QParcelas.ExecSQL;

  try
    aDM.Conexao.Commit;
    Result := 'SUCESSO';
  except
    aDM.Conexao.Rollback;
    Result := 'ERRO';
  end;
end;

function daoParcela.getDS: TObject;
begin
  Result := aDM.DSParcelas;
end;

function daoParcela.pesquisar(AFilter: TFilterSearch; pChave: string): string;
var
  msql: string;
begin
  msql := 'SELECT * FROM PARCELAS';

  case AFilter.TipoConsulta of

    TpCCodigo:
      begin
        msql := 'SELECT * FROM PARCELAS WHERE COD =' + IntToStr(AFilter.Codigo);
      end;

    // TpCParam:
    // begin
    // msql:= ( 'SELECT * FROM PARCELAS WHERE ESTADO LIKE  ' + QuotedStr( '%' + AFilter.Parametro + '%' ) );
    // end;

    TpCTODOS:
      begin
        msql := 'SELECT * FROM PARCELAS ORDER BY PARCELAS';
      end;

  end;

  aDM.QParcelas.Active   := False;
  aDM.QParcelas.SQL.Text := msql;
  aDM.QParcelas.Open;
  Result := '';
end;

function daoParcela.salvar(pObj: TObject): string;
var
  mParcela: Parcela;
  mFormaPagamento: FormasPagamentos;

begin
  mParcela := Parcela(pObj);
  mFormaPagamento := mParcela.getaFormaPgto;

  if aDM.QParcelas.Active then
    aDM.QParcelas.Close;
  aDM.QParcelas.SQL.Clear;

  if not(aDM.Conexao.InTransaction) then
    aDM.Transacao.StartTransaction;
  try
//    aDM.QParcelas.Insert;
//
//    aDM.QParcelas.FieldByName('DIAS').AsInteger           := mParcela.getDias;
//    aDM.QParcelas.FieldByName('NUMERO_PARCELA').AsInteger := mParcela.getParcelas;
//    aDM.QParcelas.FieldByName('PERCENTUAL').AsFloat       := mParcela.getPorcentagem;
//    aDM.QParcelas.FieldByName('COD_COND_PGTO').AsInteger  := mParcela.getCodCondPgto;
//    aDM.QParcelas.FieldByName('COD_FORMA_PGTO').AsInteger := mFormaPagamento.getCodigo;
//
//    aDM.QParcelas.Post;
    aDM.QParcelas.SQL.Add('insert into parcelas');
    aDM.QParcelas.SQL.Add('(COD_COND_PGTO, NUMERO_PARCELA, PERCENTUAL, DIAS, COD_FORMA_PGTO)');
    aDM.QParcelas.SQL.Add('values');
    aDM.QParcelas.SQL.Add('(:COD_COND_PGTO, :NUMERO_PARCELA, :PERCENTUAL, :DIAS, :COD_FORMA_PGTO)');

    aDM.QParcelas.ParamByName('COD_COND_PGTO').AsInteger  := mParcela.getCodCondPgto;
    aDM.QParcelas.ParamByName('NUMERO_PARCELA').AsInteger := mParcela.getParcelas;
    adm.QParcelas.ParamByName('PERCENTUAL').AsFloat       := mparcela.getPorcentagem;
    aDM.QParcelas.ParamByName('DIAS').AsInteger           := mParcela.getDias;
    aDM.QParcelas.ParamByName('COD_FORMA_PGTO').AsInteger := mParcela.getaFormaPgto.getCodigo;

    aDM.QParcelas.ExecSQL;

    aDM.Transacao.Commit;
    Result := 'S';
  except
    on e: Exception do
    begin
      raise Exception.Create('Erro: ' + e.Message);
      Result := e.Message;
      aDM.Transacao.Rollback;
    end;
  end;
end;

function daoParcela.salvarLista(lista: TObjectList<Parcela>): string;
var
  I: Integer;
  Obj: TObject;
  CodCondPgto: Integer;
begin
  // Result := False;
  CodCondPgto := lista[0].getCodCondPgto;

  for I := 0 to lista.Count - 1 do
  begin
    lista[I].setCodCondPgto(CodCondPgto);
    Obj := lista[I];
    Result := Self.salvar(Obj);
  end;
end;

end.
