unit uDaoProdutosCompras;

interface

uses uDAO,
  uFilterSearch, uProdutoCompras, uVariacoesRoupas,

  System.Generics.Collections, System.SysUtils;

type
  daoProdutoCompra = class(DAO)
  private

  protected
  public
    constructor crieObj; override;
    function getDS: TObject; override;
    function pesquisar(AFilter: TFilterSearch; pChave: string): string;
      override;
    function salvar(pObj: TObject): string; override;
    function excluir(pObj: TObject): string; override;
    function carregar(pObj: TObject): string; override;
    function salvarLista(lista: TObjectList<ProdutoCompra>): string;
    function carregarLista(lista: TObjectList<ProdutoCompra>): string;

    function RetornaListaProdutoCompra(const ACodCompra: Integer) : TObjectList<ProdutoCompra>;
    function DeleteListaProdutoCompra(const ACodCompra: Integer): Boolean;
  end;

implementation
uses
  FireDAC.Comp.Client;
{ daoVariacoesRoupas }

function daoProdutoCompra.carregar(pObj: TObject): string;
var
  mVariacaoRoupa: VariacaoRoupa;
  mProdutoCompra: ProdutoCompra;
begin
  mProdutoCompra := ProdutoCompra(pObj);
  mVariacaoRoupa := mProdutoCompra.getvariacoesRoupas;

  mProdutoCompra.setNumeroProduto(aDM.QProdutosCompras.FieldByName('NUMERO_PRODUTO').AsString);

  mProdutoCompra.getVariacoesRoupas.setNumeroVariacao
    (aDM.QProdutosCompras.FieldByName('NUMERO_VARIACAO_ROUPA').AsInteger);

  mProdutoCompra.getVariacoesRoupas.setcodRoupa
    (aDM.QProdutosCompras.FieldByName('CODIGO_VARIACAO_ROUPA').AsInteger);

  mProdutoCompra.setqtd((aDM.QProdutosCompras.FieldByName('QTD').AsInteger));
  mProdutoCompra.setValorUnitario((aDM.QProdutosCompras.FieldByName('VALOR_UNITARIO').AsCurrency));
  mProdutoCompra.setDesconto((aDM.QProdutosCompras.FieldByName('DESCONTO').AsCurrency));
  mProdutoCompra.setValorTotal((aDM.QProdutosCompras.FieldByName('VALOR_TOTAL').AsCurrency));
  mProdutoCompra.setIdCompra((aDM.QProdutosCompras.FieldByName('ID_Compra').AsInteger));
end;

function daoProdutoCompra.RetornaListaProdutoCompra(const ACodCompra: Integer)
  : TObjectList<ProdutoCompra>;
var
  AProdutoCompra: ProdutoCompra;
  AQuery  : TFDQuery;
begin
  Result := nil;
  AQuery := TFDQuery.Create(nil);
  try
    AQuery.Connection  := adm.Conexao;
    AQuery.Transaction := aDM.Transacao;

    if (AQuery.Active) then
     AQuery.Close;
    AQuery.SQL.Clear;

    AQuery.SQL.Add('SELECT * FROM PRODUTOS_COMPRAS');
    AQuery.SQL.Add('WHERE COD_COMPRA = :COD_COMPRA');
    AQuery.ParamByName('COD_COMPRA').AsInteger := ACodCompra;
    AQuery.Open;

    AQuery.First;

    Result := TObjectList<ProdutoCompra>.Create;
    while not(AQuery.Eof) do
    begin
      AProdutoCompra := ProdutoCompra.crieObj;

      with AProdutoCompra, AQuery do
      begin
        setNumeroProduto(FieldByName('numero_produto').AsInteger);

        getVariacoesRoupas.setNumeroVariacao
          (FieldByName('NUMERO_VARIACAO_ROUPA').AsInteger);

        getVariacoesRoupas.setcodRoupa
          (FieldByName('CODIGO_VARIACAO_ROUPA').AsInteger);

        setqtd(FieldByName('QTD').AsInteger);
        setValorUnitario(FieldByName('VALOR_UNITARIO').AsCurrency);
        setDesconto(FieldByName('DESCONTO').AsCurrency);
        setValorTotal(FieldByName('VALOR_TOTAL').AsCurrency);
        setId_Compra(FieldByName('ID_Compra').AsInteger);

      end;

      Result.Add(AProdutoCompra);
      AQuery.Next;
    end;

    AQuery.Close;
  finally
    FreeAndNil(AQuery);
  end;
end;

function daoProdutoCompra.carregarLista(lista: TObjectList<ProdutoCompra>): string;
begin

end;

constructor daoProdutoCompra.crieObj;
begin
  inherited;
end;

function daoProdutoCompra.DeleteListaProdutoCompra(const ACodCompra: Integer): Boolean;
begin
  if (aDM.QVariacoesRoupas.Active) then
    aDM.QVariacoesRoupas.Close;

  if not aDM.Conexao.InTransaction then
    aDM.Transacao.StartTransaction;
  try
    aDM.QVariacoesRoupas.SQL.Clear;
    aDM.QVariacoesRoupas.SQL.Add('DELETE FROM VARIACOES_ROUPAS WHERE COD_ROUPA = :COD_ROUPA');
    aDM.QVariacoesRoupas.ParamByName('COD_Roupa').AsInteger := ACodRoupa;
    aDM.QVariacoesRoupas.ExecSQL;

    Result := (aDM.QVariacoesRoupas.RowsAffected > 0);

    aDM.Transacao.Commit;
  except
    on e: Exception do
    begin
      raise Exception.Create('Erro:' + e.Message);
      Result := False;
      aDM.Transacao.Rollback;
    end;
  end;
end;

function daoProdutoCompra.excluir(pObj: TObject): string;
begin
  aDM.Conexao.StartTransaction;

  aDM.QVariacoesRoupas.SQL.Clear;
  aDM.QVariacoesRoupas.SQL.Add
    ('DELETE FROM VARIACOES_ROUPAS WHERE COD_ROUPA = :COD_ROUPA');
  aDM.QVariacoesRoupas.ParamByName('COD_ROUPA').AsInteger := VariacaoRoupa(pObj)
    .getaCodRoupa;
  aDM.QVariacoesRoupas.ExecSQL;

  try
    aDM.Conexao.Commit;
    Result := 'SUCESSO';
  except
    aDM.Conexao.Rollback;
    Result := 'ERRO';
  end;
end;

function daoProdutoCompra.getDS: TObject;
begin
  Result := aDM.DSVariacoesRoupas;
end;

function daoProdutoCompra.pesquisar(AFilter: TFilterSearch; pChave: string): string;
var
  msql: string;
begin
  msql := 'SELECT * FROM VARIACOES_ROUPAS';

  case AFilter.TipoConsulta of

//    TpCCodigo:
//      begin
//        msql := 'SELECT * FROM VariacoesRoupas WHERE COD =' + IntToStr(AFilter.Codigo);
//      end;

    // TpCParam:
    // begin
    // msql:= ( 'SELECT * FROM VariacoesRoupas WHERE ESTADO LIKE  ' + QuotedStr( '%' + AFilter.Parametro + '%' ) );
    // end;

    TpCTODOS:
      begin
        msql := 'SELECT * FROM VARIACOES_ROUPAS ORDER BY VariacoesRoupas';
      end;

  end;

  aDM.QVariacoesRoupas.Active   := False;
  aDM.QVariacoesRoupas.SQL.Text := msql;
  aDM.QVariacoesRoupas.Open;
  Result := '';
end;

function daoProdutoCompra.salvar(pObj: TObject): string;
var
  mVariacaoRoupa: VariacaoRoupa;
  mCor: Cores;
  mTamanho: Tamanhos;

begin
  mVariacaoRoupa := VariacaoRoupa(pObj);
  mCor := mVariacaoRoupa.getaCor;
  mTamanho := mVariacaoRoupa.getaTamanho;

  if aDM.QVariacoesRoupas.Active then
    aDM.QVariacoesRoupas.Close;
  aDM.QVariacoesRoupas.SQL.Clear;

  if not(aDM.Conexao.InTransaction) then
    aDM.Transacao.StartTransaction;
  try
//    aDM.QVariacoesRoupas.Insert;
//
//    aDM.QVariacoesRoupas.FieldByName('DIAS').AsInteger           := mVariacaoRoupa.getDias;
//    aDM.QVariacoesRoupas.FieldByName('NUMERO_VariacaoRoupa').AsInteger := mVariacaoRoupa.getVariacoesRoupas;
//    aDM.QVariacoesRoupas.FieldByName('PERCENTUAL').AsFloat       := mVariacaoRoupa.getPorcentagem;
//    aDM.QVariacoesRoupas.FieldByName('COD_COND_PGTO').AsInteger  := mVariacaoRoupa.getCodCondPgto;
//    aDM.QVariacoesRoupas.FieldByName('COD_FORMA_PGTO').AsInteger := mFormaPagamento.getCodigo;
//
//    aDM.QVariacoesRoupas.Post;
    aDM.QVariacoesRoupas.SQL.Add('insert into VARIACOES_ROUPAS');
    aDM.QVariacoesRoupas.SQL.Add('(COD_ROUPA, NUMERO_VARIACAO, COD_COR, COD_TAMANHO, CODIGO)');
    aDM.QVariacoesRoupas.SQL.Add('values');
    aDM.QVariacoesRoupas.SQL.Add('(:COD_ROUPA, :NUMERO_VARIACAO, :COD_COR, :COD_TAMANHO, :CODIGO)');

    aDM.QVariacoesRoupas.ParamByName('COD_ROUPA').AsInteger       := mVariacaoRoupa.getaCodRoupa;
    aDM.QVariacoesRoupas.ParamByName('NUMERO_VARIACAO').AsInteger := mVariacaoRoupa.getaNumeroVariacao;
    adm.QVariacoesRoupas.ParamByName('COD_COR').AsInteger         := mVariacaoRoupa.getaCor.getCodigo;
    aDM.QVariacoesRoupas.ParamByName('COD_TAMANHO').AsInteger     := mVariacaoRoupa.getaTamanho.getCodigo;
    aDM.QVariacoesRoupas.ParamByName('codigo').Asstring           := mVariacaoRoupa.getacodigoVariacao;

    aDM.QVariacoesRoupas.ExecSQL;

    aDM.Transacao.Commit;
    Result := 'S';
  except
    on e: Exception do
    begin
      raise Exception.Create('Erro: ' + e.Message);
      Result := e.Message;
      aDM.Transacao.Rollback;
    end;
  end;
end;

function daoProdutoCompra.salvarLista(lista: TObjectList<ProdutoCompra>): string;
var
  I: Integer;
  Obj: TObject;
  CodRoupa: Integer;
begin
  // Result := False;
  CodRoupa := lista[0].getaCodRoupa;

  for I := 0 to lista.Count - 1 do
  begin
    lista[I].setCodRoupa(CodRoupa);
    Obj := lista[I];
    Result := Self.salvar(Obj);
  end;
end;

end.

